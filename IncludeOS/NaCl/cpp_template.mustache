// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2017-2018 IncludeOS AS, Oslo, Norway
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Autogenerated by NaCl

#include <iostream>
#include <net/inet>
#include <net/super_stack.hpp>
#include <net/ip4/cidr.hpp>
{{#has_nats}}
#include <net/nat/napt.hpp>
{{/has_nats}}
{{#has_gateways}}
#include <net/router.hpp>
{{/has_gateways}}
{{#has_vlans}}
#include <net/vlan_manager.hpp>
#include <hw/devices.hpp>
{{/has_vlans}}
{{#has_load_balancers}}
#include <microLB>
{{/has_load_balancers}}
#include <syslogd>
{{#has_timers}}
#include <timers>
#include <uplink/uplink.hpp>
#include <ctime>
#include <profile>
#include <os>

using namespace std::chrono;

// ---- Timer Timestamp ----

static std::string now() {
	auto  tnow = time(0);
	auto* curtime = localtime(&tnow);

	char buff[48];
	int len = strftime(buff, sizeof(buff), "%c", curtime);
	return std::string(buff, len);
}

//< Timer Timestamp

// ---- Timer CPU ----

template <int N, typename T>
struct rolling_avg {
	std::deque<T> values;

	void push(T value) {
		if (values.size() >= N) values.pop_front();
		values.push_back(value);
	}
	double avg() const {
		double ps = 0.0;
		if (values.empty()) return ps;
		for (auto v : values) ps += v;
		return ps / values.size();
	}
};

void print_cpu_usage() {
	// CPU-usage statistics
	static uint64_t last_total = 0, last_asleep = 0;
	uint64_t tdiff = StackSampler::samples_total() - last_total;
	last_total = StackSampler::samples_total();
	uint64_t adiff = StackSampler::samples_asleep() - last_asleep;
	last_asleep = StackSampler::samples_asleep();

	if (tdiff > 0) {
		double asleep = adiff / (double) tdiff;
		static rolling_avg<5, double> asleep_avg;
		asleep_avg.push(asleep);

		/*
		printf("CPU usage: %.2f%%  Idle: %.2f%%  Active: %ld Existing: %ld Free: %ld\n",
			(1.0 - asleep) * 100.0, asleep * 100.0,
			Timers::active(), Timers::existing(), Timers::free());
		*/

		INFO("NaCl Timer CPU", "Usage: %.2f%% Idle: %.2f%%", (1.0 - asleep) * 100.0, asleep * 100.0);
	} else {
		INFO("NaCl Timer CPU", "CPU usage unavailable due to lack of samples");
	}
}

//< Timer CPU

// ---- Timer Timers ----

void print_timers_data() {
	INFO("NaCl Timer Timers", "Active: %ld Existing: %ld Free: %ld", Timers::active(), Timers::existing(), Timers::free());
}

//< Timer Timers

// ---- Timer Memory ----

static void print_mem_usage() {
	using namespace util;
	auto mem_max = OS::memory_end();
	auto total_memuse = OS::total_memuse();
	auto heap_alloc = OS::heap_usage();

	INFO("NaCl Timer Memory", "Total memory: %s, in use %0.1f%% (%s heap allocated)",
		Byte_r(mem_max).to_string().c_str(),
		(double(total_memuse) / mem_max) * 100, Byte_r(heap_alloc).to_string().c_str());
}

//< Timer Memory
{{/has_timers}}

using namespace net;

namespace nacl {
  class Filter {
  public:
    virtual Filter_verdict<IP4> operator()(IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr ct_entry) = 0;
    virtual ~Filter() {}
  };
}

{{#has_gateways}}
std::unique_ptr<Router<IP4>> nacl_router_obj;
{{/has_gateways}}
{{#enable_ct}}
std::shared_ptr<Conntrack> nacl_ct_obj;
{{/enable_ct}}
{{#has_nats}}
std::unique_ptr<nat::NAPT> nacl_natty_obj;
{{/has_nats}}
{{#has_load_balancers}}
static microLB::Balancer* nacl_lb_obj = nullptr;

{{#has_timers}}
// ---- Timer LB ----

void print_lb_stats() {
	static int64_t last = 0;
	const auto& nodes = nacl_lb_obj->nodes;

	auto totals = nodes.total_sessions();
	int  growth = totals - last;  last = totals;

	INFO("NaCl Timer LB", "");
	printf("Total %ld (%+d) Sess %d Wait %d TO %d - Pool %d C.Att %d Err %d\n",
		totals, growth, nodes.open_sessions(), nacl_lb_obj->wait_queue(),
		nodes.timed_out_sessions(), nodes.pool_size(),
		nodes.pool_connecting(), nacl_lb_obj->connect_throws());

	// node information
	int n = 0;
	for (auto& node : nodes) {
		printf("[%s %s P=%d C=%d]  ", node.address().to_string().c_str(),
			(node.is_active() ? "ONL" : "OFF"), node.pool_size(), node.connection_attempts());
		if (++n == 2) { n = 0; printf("\n"); }
	}
	if (n > 0) printf("\n");
}

//< Timer LB
{{/has_timers}}
{{/has_load_balancers}}
{{#has_functions}}

namespace custom_made_classes_from_nacl {

{{#filters}}
class {{title}} : public nacl::Filter {
public:
	Filter_verdict<IP4> operator()(IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr ct_entry) {
		{{{content}}}
	}
};

{{/filters}}
{{#nats}}
class {{title}} : public nacl::Filter {
public:
	Filter_verdict<IP4> operator()(IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr ct_entry) {
		{{{content}}}
		// At the end of a Nat we want to accept the packet that hasn't been DNATed or SNATed
		return {std::move(pckt), Filter_verdict_type::ACCEPT};
	}
};

{{/nats}}
} //< namespace custom_made_classes_from_nacl

{{/has_functions}}
void register_plugin_nacl() {
	INFO("NaCl", "Registering NaCl plugin");

	{{#ifaces}}
	{{^is_vlan}}
	auto& {{name}} = Super_stack::get({{{index}}});
	{{/is_vlan}}
	{{#is_vlan}}
	// vlan {{name}}
	{{#vlan_index_is_mac_string}}
	int index_{{name}} = hw::Devices::nic_index(MAC::Addr({{{index}}}));
	Super_stack::inet().create(VLAN_manager::get(index_{{name}}).add(hw::Devices::nic(index_{{name}}), {{{vlan}}}), index_{{name}}, {{{vlan}}});
	auto& {{name}} = Super_stack::get(index_{{name}}, {{{vlan}}});
	{{/vlan_index_is_mac_string}}
	{{^vlan_index_is_mac_string}}
	Super_stack::inet().create(VLAN_manager::get({{{index}}}).add(hw::Devices::nic({{{index}}}), {{{vlan}}}), {{{index}}}, {{{vlan}}});
	auto& {{name}} = Super_stack::get({{{index}}}, {{{vlan}}});
	{{/vlan_index_is_mac_string}}
	{{/is_vlan}}
	{{#config_is_static}}
	{{#address}}
	{{name}}.network_config({{address}}, {{netmask}}{{#gateway}}, {{.}}{{/gateway}}{{^gateway}}, 0{{/gateway}}{{#dns}}, {{.}}{{/dns}});
	{{/address}}
	{{/config_is_static}}
	{{#config_is_dhcp}}
	{{name}}.negotiate_dhcp(10.0, [&{{name}}] (bool timedout) {
		if (timedout) {
			INFO("NaCl plugin interface {{name}}", "DHCP request timed out. Nothing to do.");
			return;
		}
		INFO("NaCl plugin interface {{name}}", "IP address updated: %s", {{name}}.ip_addr().str().c_str());
	});
	{{/config_is_dhcp}}
	{{#config_is_dhcp_fallback}}
	{{name}}.negotiate_dhcp(10.0, [&{{name}}] (bool timedout) {
		if (timedout) {
			INFO("NaCl plugin interface {{name}}", "DHCP timeout (%s) - falling back to static configuration", {{name}}.ifname().c_str());
			{{name}}.network_config({{address}}, {{netmask}}{{#gateway}}, {{.}}{{/gateway}}{{^gateway}}, 0{{/gateway}}{{#dns}}, {{.}}{{/dns}});
		}
	});
	{{/config_is_dhcp_fallback}}
	{{#send_queue_limit}}
	{{name}}.nic().set_sendq_limit({{{send_queue_limit}}});
	{{/send_queue_limit}}
	{{#buffer_limit}}
	{{name}}.nic().set_buffer_limit({{{buffer_limit}}});
	{{/buffer_limit}}
	{{/ifaces}}
	{{#syslogs}}

	// Init syslog over UDP
	Syslog::set_facility(std::make_unique<Syslog_udp>());
	// Syslog (setting IP and port for the syslog messages)
	Syslog::settings( {{address}}, {{port}} );
	INFO("NaCl", "Setting up syslog. If sent over UDP, syslog messages are sent to IP %s and port %d", Syslog::ip().to_string().c_str(), Syslog::port());
	{{/syslogs}}

	{{#filters}}
	custom_made_classes_from_nacl::{{title}} {{name}};
	{{/filters}}
	{{#nats}}

	custom_made_classes_from_nacl::{{title}} {{name}};
	{{/nats}}
	{{#pushes_iface}}

	{{#function_names}}
	{{name}}.ip_obj().{{chain}}_chain().chain.push_back({{function_name}});
	{{/function_names}}
	{{/pushes_iface}}
	{{#has_gateways}}
	{{#gateways}}

	// Router

	INFO("NaCl", "Setup routing");
	Router<IP4>::Routing_table routing_table {
		{{#routes}}
		{ {{#net}}{{.}}{{/net}}{{#host}}{{.}}{{/host}}, {{#netmask}}{{.}}, {{/netmask}}{{#nexthop}}{{.}}{{/nexthop}}{{^nexthop}}0{{/nexthop}}{{#iface}}, {{.}}{{/iface}}{{#cost}}, {{.}}{{/cost}}{{^cost}}, 1{{/cost}} }{{#comma}},{{/comma}}
		{{/routes}}
	};
	nacl_router_obj = std::make_unique<Router<IP4>>(routing_table);
	{{#send_time_exceeded}}
	// Set send_time_exceeded:
	nacl_router_obj->send_time_exceeded = {{.}};
	{{/send_time_exceeded}}
	{{#pushes_gateway}}
	{{#function_names}}
	{{name}}->{{chain}}_chain.chain.push_back({{function_name}});
	{{/function_names}}
	{{/pushes_gateway}}
	// Set ip forwarding on every iface mentioned in routing_table
	{{#ip_forward_ifaces}}
	{{iface}}.set_forward_delg(nacl_router_obj->forward_delg());
	{{/ip_forward_ifaces}}
	{{/gateways}}
	{{/has_gateways}}
	{{#enable_ct}}

	// Ct

	nacl_ct_obj = std::make_shared<Conntrack>();
	{{#conntracks}}
	{{#limit}}nacl_ct_obj->maximum_entries = {{.}};{{/limit}}
	{{#reserve}}nacl_ct_obj->reserve({{.}});{{/reserve}}
	{{#timeouts}}
	{{#tcp}}
	nacl_ct_obj->timeout.{{type}}.tcp = Conntrack::Timeout_duration{ {{tcp}} };
	{{/tcp}}
	{{#udp}}
	nacl_ct_obj->timeout.{{type}}.udp = Conntrack::Timeout_duration{ {{udp}} };
	{{/udp}}
	{{#icmp}}
	nacl_ct_obj->timeout.{{type}}.icmp = Conntrack::Timeout_duration{ {{icmp}} };
	{{/icmp}}
	{{/timeouts}}
	{{/conntracks}}
	{{#enable_ct_ifaces}}

	INFO("NaCl", "Enabling Conntrack on {{iface}}");
	{{iface}}.enable_conntrack(nacl_ct_obj);
	{{/enable_ct_ifaces}}
	{{/enable_ct}}
	{{#has_nats}}

	// NAT

	nacl_natty_obj = std::make_unique<nat::NAPT>(nacl_ct_obj);
	{{#has_masquerades}}

	auto masq = [](IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr entry)->auto {
		nacl_natty_obj->masquerade(*pckt, stack, entry);
		return Filter_verdict<IP4>{std::move(pckt), Filter_verdict_type::ACCEPT};
	};
	auto demasq = [](IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr entry)->auto {
		nacl_natty_obj->demasquerade(*pckt, stack, entry);
		return Filter_verdict<IP4>{std::move(pckt), Filter_verdict_type::ACCEPT};
	};
	{{#masquerades}}

	INFO("NaCl", "Enable MASQUERADE on {{iface}}");
	{{iface}}.ip_obj().prerouting_chain().chain.push_back(demasq);
	{{iface}}.ip_obj().postrouting_chain().chain.push_back(masq);
	{{/masquerades}}
	{{/has_masquerades}}
	{{#has_auto_natting_ifaces}}

	auto snat_translate = [](IP4::IP_packet_ptr pckt, Inet&, Conntrack::Entry_ptr entry)-> auto {
		nacl_natty_obj->snat(*pckt, entry);
		return Filter_verdict<IP4>{std::move(pckt), Filter_verdict_type::ACCEPT};
	};
	auto dnat_translate = [](IP4::IP_packet_ptr pckt, Inet&, Conntrack::Entry_ptr entry)-> auto {
		nacl_natty_obj->dnat(*pckt, entry);
		return Filter_verdict<IP4>{std::move(pckt), Filter_verdict_type::ACCEPT};
	};
	{{#auto_natting_ifaces}}
	{{iface}}.ip_obj().prerouting_chain().chain.push_back(dnat_translate);
	{{iface}}.ip_obj().postrouting_chain().chain.push_back(snat_translate);
	{{/auto_natting_ifaces}}
	{{/has_auto_natting_ifaces}}
	{{/has_nats}}
	{{#has_load_balancers}}

	// Load balancers
	{{#load_balancers}}

	{{servers_iface_name}}.tcp().set_MSL(15s);
	nacl_lb_obj = new microLB::Balancer({{clients_iface_name}}, {{port}}, {{servers_iface_name}});
	{{#pool}}

	Socket socket_{{index}}{ {{address}}, {{port}} };
	nacl_lb_obj->nodes.add_node({{servers_iface_name}}, socket_{{index}}, nacl_lb_obj->get_pool_signal());
	{{/pool}}

	/*
	Name: {{name}}
	Layer: {{layer}}

	Clients iface: {{clients_iface_name}}
	Clients port: {{port}}
	Clients wait queue limit: {{wait_queue_limit}}
	Clients session limit: {{session_limit}}

	Servers iface: {{servers_iface_name}}
	Servers algorithm: {{algorithm}}
	Servers pool:
	{{#pool}}

	Node address: {{address}}
	Node port: {{port}}
	{{/pool}}
	{{/load_balancers}}
	*/
	{{/has_load_balancers}}
	{{#has_timers}}

	StackSampler::begin();
	auto& uplink = uplink::get();
	{{#timers}}

	Timers::periodic(1s, {{interval}}s, [{{#has_stats}}&uplink{{/has_stats}}](auto) {
		{{#has_timestamp}}
		INFO("NaCl Timer Timestamp", "%s", now().c_str());
		{{/has_timestamp}}
		{{#has_stats}}
		INFO("NaCl Timer Stats", "Sending statistics over uplink");
		uplink.send_stats();
		{{/has_stats}}
		{{#has_memory}}
		print_mem_usage();
		{{/has_memory}}
		{{#has_cpu}}
		print_cpu_usage();
		{{/has_cpu}}
		{{#has_storage}}
		{{/has_storage}}
		{{#has_lb}}
		{{#has_load_balancers}}
		print_lb_stats();
		{{/has_load_balancers}}
		{{/has_lb}}
		{{#has_stack_sampling}}
		INFO("NaCl Timer Stack Sampling", "");
		StackSampler::print(5);
		{{/has_stack_sampling}}
		{{#timer_has_timers}}
		print_timers_data();
		{{/timer_has_timers}}
	});
	{{/timers}}
	{{/has_timers}}
}

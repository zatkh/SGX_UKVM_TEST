// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2017-2018 IncludeOS AS, Oslo, Norway
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Autogenerated by NaCl

#include <iostream>
#include <net/inet>
#include <net/super_stack.hpp>
#include <net/ip4/cidr.hpp>
#include <syslogd>

using namespace net;

namespace nacl {
  class Filter {
  public:
    virtual Filter_verdict<IP4> operator()(IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr ct_entry) = 0;
    virtual ~Filter() {}
  };
}

std::shared_ptr<Conntrack> nacl_ct_obj;

namespace custom_made_classes_from_nacl {

class My_Filter : public nacl::Filter {
public:
	Filter_verdict<IP4> operator()(IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr ct_entry) {
		if (not ct_entry) {
return {nullptr, Filter_verdict_type::DROP};
}
Syslog::syslog(LOG_DEBUG, "Incoming packet from %s", pckt->ip_src().to_string().c_str());
if (ct_entry->state == Conntrack::State::ESTABLISHED) {
Syslog::syslog(LOG_INFO, "Accepting packet from an already established connection (from %s)", pckt->ip_src().to_string().c_str());
Syslog::syslog(LOG_DEBUG, "Packet from established connection. Source addr: %s. TTL: %u. Checksum: %u", pckt->ip_src().to_string().c_str(), pckt->ip_ttl(), pckt->ip_checksum());
return {std::move(pckt), Filter_verdict_type::ACCEPT};
}
if ((ip4::Cidr{10,0,0,0,24}.contains(pckt->ip_src()) or ip4::Cidr{140,20,30,10,24}.contains(pckt->ip_src()))) {
Syslog::syslog(LOG_INFO, "Accepting packet from acceptable saddr %s", pckt->ip_src().to_string().c_str());
return {std::move(pckt), Filter_verdict_type::ACCEPT};
}
if ((pckt->ip_src() >= IP4::addr{120,10,20,30} and pckt->ip_src() <= IP4::addr{120,10,30,40})) {
Syslog::syslog(LOG_WARNING, "Dropping packet from shady saddr %s", pckt->ip_src().to_string().c_str());
return {nullptr, Filter_verdict_type::DROP};
}
Syslog::syslog(LOG_INFO, "Default verdict - dropping packet from %s", pckt->ip_src().to_string().c_str());
return {nullptr, Filter_verdict_type::DROP};

	}
};

} //< namespace custom_made_classes_from_nacl

void register_plugin_nacl() {
	INFO("NaCl", "Registering NaCl plugin");

	auto& uplink = Super_stack::get(0);
	uplink.network_config(IP4::addr{10,0,0,40}, IP4::addr{255,255,255,0}, IP4::addr{10,0,0,1});
	auto& eth0 = Super_stack::get(1);
	eth0.network_config(IP4::addr{10,0,0,45}, IP4::addr{255,255,255,0}, IP4::addr{10,0,0,1});

	// Init syslog over UDP
	Syslog::set_facility(std::make_unique<Syslog_udp>());
	// Syslog (setting IP and port for the syslog messages)
	Syslog::settings( IP4::addr{10,0,0,1}, 514 );
	INFO("NaCl", "Setting up syslog. If sent over UDP, syslog messages are sent to IP %s and port %d", Syslog::ip().to_string().c_str(), Syslog::port());

	custom_made_classes_from_nacl::My_Filter my_filter;

	eth0.ip_obj().prerouting_chain().chain.push_back(my_filter);

	// Ct

	nacl_ct_obj = std::make_shared<Conntrack>();

	INFO("NaCl", "Enabling Conntrack on eth0");
	eth0.enable_conntrack(nacl_ct_obj);
}

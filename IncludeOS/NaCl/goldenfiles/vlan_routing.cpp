// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2017-2018 IncludeOS AS, Oslo, Norway
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Autogenerated by NaCl

#include <iostream>
#include <net/inet>
#include <net/super_stack.hpp>
#include <net/ip4/cidr.hpp>
#include <net/router.hpp>
#include <net/vlan_manager.hpp>
#include <hw/devices.hpp>
#include <syslogd>

using namespace net;

namespace nacl {
  class Filter {
  public:
    virtual Filter_verdict<IP4> operator()(IP4::IP_packet_ptr pckt, Inet& stack, Conntrack::Entry_ptr ct_entry) = 0;
    virtual ~Filter() {}
  };
}

std::unique_ptr<Router<IP4>> nacl_router_obj;
std::shared_ptr<Conntrack> nacl_ct_obj;
void register_plugin_nacl() {
	INFO("NaCl", "Registering NaCl plugin");

	// vlan vlan1
	Super_stack::inet().create(VLAN_manager::get(1).add(hw::Devices::nic(1), 2), 1, 2);
	auto& vlan1 = Super_stack::get(1, 2);
	vlan1.network_config(IP4::addr{10,100,0,50}, IP4::addr{255,255,255,0}, 0);
	// vlan vlan2
	Super_stack::inet().create(VLAN_manager::get(2).add(hw::Devices::nic(2), 2), 2, 2);
	auto& vlan2 = Super_stack::get(2, 2);
	vlan2.network_config(IP4::addr{10,100,1,50}, IP4::addr{255,255,255,0}, 0);
	auto& eth1 = Super_stack::get(1);
	eth1.network_config(IP4::addr{10,0,0,41}, IP4::addr{255,255,255,0}, 0);
	auto& eth0 = Super_stack::get(0);
	eth0.network_config(IP4::addr{10,0,0,40}, IP4::addr{255,255,255,0}, 0);


	// Router

	INFO("NaCl", "Setup routing");
	Router<IP4>::Routing_table routing_table {
		{ IP4::addr{10,100,0,0}, IP4::addr{255,255,255,0}, 0, vlan1, 1 },
		{ IP4::addr{10,100,1,0}, IP4::addr{255,255,255,0}, 0, vlan2, 1 },
		{ IP4::addr{0,0,0,0}, IP4::addr{0,0,0,0}, IP4::addr{10,100,0,1}, vlan1, 1 }
	};
	nacl_router_obj = std::make_unique<Router<IP4>>(routing_table);
	// Set ip forwarding on every iface mentioned in routing_table
	vlan1.set_forward_delg(nacl_router_obj->forward_delg());
	vlan2.set_forward_delg(nacl_router_obj->forward_delg());

	// Ct

	nacl_ct_obj = std::make_shared<Conntrack>();

	INFO("NaCl", "Enabling Conntrack on vlan1");
	vlan1.enable_conntrack(nacl_ct_obj);

	INFO("NaCl", "Enabling Conntrack on vlan2");
	vlan2.enable_conntrack(nacl_ct_obj);
}
